#!/bin/bashn# analyze-existing-codebase.sh - Analyze existing codebase for PRP v3 integrationnnecho "🔍 Analyzing existing codebase for PRP v3 integration..."nnif [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; thenn    echo "❌ ERROR: Missing parameters"n    echo "Usage: ./analyze-existing-codebase.sh <project_name> <language> <project_type>"n    exit 1nfinnPROJECT_NAME="$1"nLANGUAGE="$2"nPROJECT_TYPE="$3"nnecho "   Project: $PROJECT_NAME"necho "   Language: $LANGUAGE"necho "   Type: $PROJECT_TYPE"necho ""nn# Create analysis directorynmkdir -p "archon-analysis"necho "   📁 Created archon-analysis/ directory for integration files"nn# Analyze project structurenecho "   📊 Analyzing project structure..."nif command -v tree >/dev/null 2>&1; thenn    tree -I "node_modules|__pycache__|*.pyc|.git|archon-analysis" > "archon-analysis/project-structure.txt"n    echo "   ✅ Project structure saved to archon-analysis/project-structure.txt"nelsen    find . -type f -not -path "./node_modules/*" -not -path "./__pycache__/*" -not -path "./.git/*" -not -path "./archon-analysis/*" | head -50 > "archon-analysis/project-structure.txt"n    echo "   ✅ Project structure saved to archon-analysis/project-structure.txt"nfi nn# Analyze existing code patternsnecho "   🔍 Analyzing existing code patterns..."ncat > "archon-analysis/code-patterns.md" << EOFn# Code Pattern Analysis for $PROJECT_NAMEnn## Project Overviewn- **Name**: $PROJECT_NAMEn- **Language**: $LANGUAGEn- **Type**: $PROJECT_TYPEn- **Analysis Date**: $(date)n- **Integration Method**: Existing Project + PRP v3nn## Existing Architecture Patternsnn### File OrganizationnEOFnn# Language-specific pattern analysisnif [ "$LANGUAGE" = "Python" ]; thenn    echo "   🐍 Analyzing Python patterns..."n    cat >> "archon-analysis/code-patterns.md" << EOFn- **Source Structure**: `src/` or root-level Python filesn- **Dependencies**: requirements.txt or pyproject.tomln- **Testing**: pytest or unittest frameworksn- **Configuration**: .env files or config modulesnn### Python-Specific PatternsnEOFn    # Look for common Python patternsn    if [ -f "requirements.txt" ]; thenn        echo "      - Dependencies: requirements.txt found" >> "archon-analysis/code-patterns.md"n    fi n    if [ -d "src" ]; thenn        echo "      - Source: src/ directory structure" >> "archon-analysis/code-patterns.md"n    fi n    if [ -d "tests" ]; thenn        echo "      - Testing: tests/ directory" >> "archon-analysis/code-patterns.md"n    fi n    if [ -f ".env" ] || [ -f ".env.example" ]; thenn        echo "      - Implementation precision with specific tasks" >> "archon-analysis/code-patterns.md"n    fi nelif [ "$LANGUAGE" = "JavaScript" ]; thenn    echo "   🟨 Analyzing JavaScript patterns..."n    cat >> "archon-analysis/code-patterns.md" << EOFn- **Source Structure**: `src/`, `app/`, or `components/` directoriesn- **Dependencies**: package.json with npm/yarn/pnpmn- **Testing**: Jest, Vitest, or similar frameworksn- **Configuration**: Various config files (next.config.js, etc.)nn### JavaScript-Specific PatternsnEOFn    # Look for common JavaScript patternsn    if [ -f "package.json" ]; thenn        echo "      - Dependencies: package.json found" >> "archon-analysis/code-patterns.md"n    fi n    if [ -d "src" ]; thenn        echo "      - Source: src/ directory structure" >> "archon-analysis/code-patterns.md"n    fi n    if [ -d "app" ]; thenn        echo "      - Source: app/ directory (Next.js App Router)" >> "archon-analysis/code-patterns.md"n    fi n    if [ -d "components" ]; thenn        echo "      - Components: components/ directory" >> "archon-analysis/code-patterns.md"n    fi n    if [ -d "tests" ] || [ -f "jest.config.js" ] || [ -f "vitest.config.js" ]; thenn        echo "      - Testing: Testing framework configured" >> "archon-analysis/code-patterns.md"n    fi nfi nn# Analyze existing development statenecho "   📈 Analyzing development state..."ncat >> "archon-analysis/code-patterns.md" << EOFnn## Development State Analysisnn### What's Already BuiltnEOFnn# Look for existing features based on file structurenif [ -d "src" ]; thenn    echo "      - Core source code structure exists" >> "archon-analysis/code-patterns.md"nfi nif [ -d "tests" ]; thenn    echo "      - Testing infrastructure in place" >> "archon-analysis/code-patterns.md"nfi nif [ -f "README.md" ]; thenn    echo "      - Documentation started" >> "archon-analysis/code-patterns.md"nfi nif [ -f ".gitignore" ]; thenn    echo "      - Version control configured" >> "archon-analysis/code-patterns.md"nfi nn# Look for configuration filesnif [ -f ".env" ] || [ -f ".env.example" ]; thenn    echo "      - Environment configuration exists" >> "archon-analysis/code-patterns.md"nfi nif [ -f "docker-compose.yml" ] || [ -f "Dockerfile" ]; thenn    echo "      - Containerization configured" >> "archon-analysis/code-patterns.md"nfi nncat >> "archon-analysis/code-patterns.md" << EOFnn### What Needs to Be Builtn- [To be determined based on project requirements]n- [To be determined based on project requirements]n- [To be determined based on project requirements]nn## Integration Recommendationsnn### PRP v3 Integration Approachn1. **Preserve existing work** - Don't disrupt current functionalityn2. **Extend current patterns** - Follow established conventionsn3. **Add validation loops** - Implement quality assurancen4. **Document existing patterns** - Capture current best practicesn5. **Plan remaining development** - Focus on what's not yet builtnn### Archon Workflow Integrationn1. **Copy workflow scripts** to project rootn2. **Setup Cursor rules** for enhanced developmentn3. **Generate PRP v3** for remaining workn4. **Integrate validation** into development processn5. **Maintain consistency** with existing patternsnn## Next Stepsn1. Review this analysis for accuracyn2. Create INITIAL.md based on current staten3. Generate PRP v3 for remaining developmentn4. Integrate Archon workflow into existing processn5. Continue development with PRP guidancennEOFnnecho "   ✅ Code pattern analysis complete"necho "   📄 Results saved to archon-analysis/code-patterns.md"necho ""necho "🔍 Analysis Summary:"necho "   • Project structure documented"necho "   • Language-specific patterns identified"necho "   • Development state assessed"necho "   • Integration approach recommended"necho ""necho "✅ Codebase analysis complete!"n