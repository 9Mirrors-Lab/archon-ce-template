---ndescription: Global Rules for Context Engineering and PRP Workflownglobs: ["**/*.md", "**/*.mdx", "**/*.txt", "**/*.py", "**/*.js", "**/*.ts", "**/*.rs", "**/*.go", "**/*.java"]nalwaysApply: truen---nn# Template Generator - Global Rules for Context EngineeringnnThis file contains the global rules and principles that apply to ALL context engineering work, regardless of what template or project you're building. These rules never change and should be followed consistently.nn## 🔄 Context Engineering Core Principlesnn**IMPORTANT: These principles apply to ALL context engineering work:**nn### PRP Framework Workflown- **Always start with INITIAL.md** - Define requirements before generating PRPsn- **Use the PRP pattern**: INITIAL.md → `/create-prp INITIAL.md` → `/execute-prp PRPs/filename.md`n- **Follow validation loops** - Each PRP must include executable validation stepsn- **Context is King** - Include ALL necessary documentation, examples, and patternsnn### Research Methodologyn- **Web search first** - Always do extensive web research before implementationn- **Documentation deep dive** - Study official docs, best practices, and common patternsn- **Pattern extraction** - Identify reusable patterns and architectural conventionsn- **Gotcha documentation** - Document common pitfalls and edge casesnn## 📚 Project Awareness & Contextnn- **Use consistent naming conventions** and file structure patternsn- **Follow established directory organization** patternsn- **Leverage examples extensively** - Study existing patterns before creating new onesnn## 🧱 Code Structure & Modularitynn- **Never create files longer than 500 lines** - Split into modules when approaching limitn- **Organize code into clearly separated modules** grouped by feature or responsibilityn- **Use clear, consistent imports** (prefer relative imports within packages)n- **Follow established coding standards** and conventionsnn## ✅ Task Managementnn- **Break complex tasks into smaller steps** with clear completion criterian- **Mark tasks complete immediately** after finishing themn- **Update task status in real-time** as work progressesnn## 📎 Documentation Standardsnn- **Write comprehensive documentation** for every componentn- **Include clear usage examples** with working coden- **Document all gotchas and edge cases** to prevent common errorsn- **Maintain up-to-date references** to external documentationnn## 🔍 Research Standardsnnn- **Web search is your best friend** - Use it extensively for technology researchn- **Study official documentation thoroughly** before implementationn- **Research established patterns** and best practices for the technologyn- **Pattern extraction** - Identify reusable patterns and architectural conventionsn- **Gotcha documentation** - Document common pitfalls and edge casesnn## 🎯 Implementation Standardsnn- **Follow the PRP workflow religiously** - Don't skip stepsn- **Always validate before proceeding** to the next stepn- **Use existing patterns as templates** rather than creating from scratchn- **Include comprehensive error handling** in all implementationsnn## 🚫 Anti-Patterns to Always Avoidnn- ❌ Don't skip research - Always understand the technology deeply firstn- ❌ Don't create generic solutions - Always specialize for the specific use casen- ❌ Don't ignore validation - Every step must include verificationn- ❏ Don't assume knowledge - Document everything explicitlyn- ❌ Don't skip examples - Always include working code examplesn- ❌ Don't forget edge cases - Include error handling and gotchasnn## 🔧 Tool Usage Standardsnn- **Use web search extensively** for research and documentationn- **Follow established command patterns** for slash commandsn- **Use validation loops** to ensure quality at each stepnn## 🔄 Integration with Archon CE Templatenn**When using with Archon CE Template:**n1. **Advanced PRP template v3** provides implementation precisionn2. **Workflow scripts** ensure proper execution sequencen3. **Cursor rules** enhance IDE integration and workflown4. **Language hints** provide technology-specific guidancen5. **Validation loops** ensure quality at every stepnn## 🎯 PRP v3 Standardsnn**Advanced template requirements:**n- **Implementation-focused** with specific task breakdownsn- **Pattern references** with exact file paths and methodsn- **Validation loops** with 4 comprehensive levelsn- **Anti-patterns** documentation to prevent common mistakesn- **Context completeness** validation before proceedingn- **Integration points** specification for system-wide changesnn## 🚀 Workflow Integrationnn**Combined approach benefits:**n- **Archon workflow** provides structure and automationn- **Advanced PRP template** ensures implementation precisionn- **Cursor rules** enhance developer experiencen- **Language hints** provide technology guidancen- **Validation loops** maintain quality standardsnn## 📋 Quality Gatesnn**Every PRP must pass:**n- [ ] Context completeness validationn- [ ] Implementation task specificityn- [ ] Pattern reference accuracyn- [ ] Validation loop completenessn- [ ] Anti-pattern documentationn- [ ] Success criteria measurabilitynn## 🔍 Research Integrationnn**Web search integration:**n- **Technology research** before implementationn- **Best practice documentation** for patternsn- **Common pitfall identification** for gotchasn- **Performance optimization** researchn- **Security consideration** documentationnn## 🎯 Success Metricsnn**Context engineering success when:**n- PRPs enable one-pass implementationn- All necessary context is documentedn- Patterns are clearly referencedn- Validation is comprehensiven- Anti-patterns are preventedn- Implementation quality is highnn## 🔄 Continuous Improvementnn**Always iterate and improve:**n- **Document lessons learned** from each implementationn- **Update pattern references** based on discoveriesn- **Enhance validation loops** based on failuresn- **Refine anti-patterns** based on mistakesn- **Improve context templates** based on gapsnn## 🚫 Final Anti-Patternsnn**Never allow these in any context engineering work:**n- ❌ Incomplete context documentationn- ❌ Generic implementation guidancen- ❌ Missing pattern referencesn- ❌ Incomplete validation stepsn- ❌ Vague success criterian- ❌ Missing error handling guidancennThese global rules apply regardless of whether you're generating templates, implementing features, or doing research. They form the foundation of effective context engineering work and ensure the highest quality PRPs and implementations.