#!/bin/bashn# integrate-existing-project.sh - Integrate advanced PRP v3 into existing, already-started projectnnecho "üîÑ Integrating Advanced PRP v3 into Existing Project"necho "=================================================="necho ""necho "üéØ This workflow helps you:"necho "   ‚Ä¢ Analyze existing codebase and architecture"necho "   ‚Ä¢ Create PRP v3 based on current state"necho "   ‚Ä¢ Integrate Archon workflow without disrupting existing work"necho "   ‚Ä¢ Set up Cursor IDE rules for ongoing development"necho ""nn# Check if we're in a project directory with existing codenif [ ! -d "src" ] && [ ! -d "app" ] && [ ! -d "lib" ] && [ ! -d "components" ]; thenn    echo "‚ùå ERROR: Not in an existing project directory!"n    echo "   This workflow is for projects that already have code"n    echo "   Navigate to your existing project directory first"n    exit 1nfinnPROJECT_NAME=$(basename "$PWD")necho "üìÅ Project: $PROJECT_NAME"necho "   Detected existing project structure"necho ""necho "üîç Analyzing existing codebase..."nn# Detect project type and languagenif [ -f "package.json" ]; thenn    echo "   üì¶ Node.js/JavaScript project detected"n    if grep -q "next" package.json; thenn        PROJECT_TYPE="Next.js"n        LANGUAGE="JavaScript"n    elif grep -q "react" package.json; thenn        PROJECT_TYPE="React"n        LANGUAGE="JavaScript"n    else n        PROJECT_TYPE="Node.js"n        LANGUAGE="JavaScript"n    finnelif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; thenn    PROJECT_TYPE="Python"n    LANGUAGE="Python"nelif [ -f "Cargo.toml" ]; thenn    PROJECT_TYPE="Rust"n    LANGUAGE="Rust"nelif [ -f "go.mod" ]; thenn    PROJECT_TYPE="Go"n    LANGUAGE="Go"nelse n    echo "   ‚ö†Ô∏è  Project type not clearly detected, using common patterns"n    PROJECT_TYPE="Unknown"n    LANGUAGE="Common"nfinnnecho "   ‚úÖ Language: $LANGUAGE"necho "   ‚úÖ Type: $PROJECT_TYPE"necho ""necho "üìã Integration Steps:"necho "1. Analyze existing codebase structure"necho "2. Create INITIAL.md based on current state"necho "3. Generate PRP v3 for remaining development"necho "4. Setup Archon workflow and Cursor rules"necho "5. Integrate with existing development process"necho ""nn# Step 1: Analyze existing codebasenecho "üîç Step 1: Analyzing existing codebase..."n./scripts/analyze-existing-codebase.sh "$PROJECT_NAME" "$LANGUAGE" "$PROJECT_TYPE"nnif [ $? -eq 0 ]; thenn    echo "‚úÖ Step 1: Codebase analysis complete"nelsen    echo "‚ùå ERROR: Codebase analysis failed"n    exit 1nfinnecho ""nn# Step 2: Create INITIAL.md based on current statenecho "üìù Step 2: Creating INITIAL.md based on current state..."n./scripts/create-initial-from-existing.sh "$PROJECT_NAME" "$LANGUAGE" "$PROJECT_TYPE"nnif [ $? -eq 0 ]; thenn    echo "‚úÖ Step 2: INITIAL.md created from existing project"nelsen    echo "‚ùå ERROR: Failed to create INITIAL.md"n    exit 1nfinnecho ""nn# Step 3: Generate PRP v3 for remaining developmentnecho "üéØ Step 3: Generating PRP v3 for remaining development..."n./workflows/step-2-update-template.sh || exit 1n./workflows/step-3-create-prp.sh || exit 1necho ""nn# Step 4: Setup Archon workflow and Cursor rulesnecho "‚öôÔ∏è  Step 4: Setting up Archon workflow and Cursor rules..."n./workflows/step-4-setup-cursor.sh || exit 1necho ""nn# Step 5: Create integration guide for existing projectnecho "üìö Step 5: Creating integration guide..."n./scripts/create-integration-guide.sh "$PROJECT_NAME" "$LANGUAGE" "$PROJECT_TYPE"nnif [ $? -eq 0 ]; thenn    echo "‚úÖ Step 5: Integration guide created"nelsen    echo "‚ùå ERROR: Failed to create integration guide"n    exit 1nfi necho ""necho "üéâ Existing Project Integration Complete!"necho ""necho "üìã What you now have:"necho "   ‚Ä¢ INITIAL.md based on your existing codebase"necho "   ‚Ä¢ PRP v3 for remaining development work"necho "   ‚Ä¢ Archon workflow integrated into existing project"necho "   ‚Ä¢ Cursor IDE rules for enhanced development"necho "   ‚Ä¢ Integration guide for ongoing development"necho ""necho "üöÄ Next steps:"necho "1. Review the generated PRP for remaining work"necho "2. Use Cursor IDE with enhanced rules"necho "3. Continue development following PRP guidance"necho "4. Run validation loops as you implement new features"necho "5. Update PRP as requirements evolve"necho ""necho "üí° Integration Benefits:"necho "   ‚Ä¢ No disruption to existing work"necho "   ‚Ä¢ Clear roadmap for remaining development"necho "   ‚Ä¢ Quality assurance for new features"necho "   ‚Ä¢ Pattern consistency going forward"necho "   ‚Ä¢ Enhanced IDE experience"n