---
alwaysApply: true
---

# PRP Creation Rules - Advanced Implementation Focus

## Core PRP Creation Workflow

**MANDATORY: Always follow this exact sequence:**

1. **Read INITIAL.md first** - Parse project context and requirements
2. **Analyze codebase** - Understand existing patterns and structure
3. **Generate PRP** - Use advanced template v3 with implementation focus
4. **Validate context** - Ensure all necessary information is included
5. **Review and refine** - Iterate until PRP is implementation-ready

## PRP Template v3 Standards

### Required Sections (ALL must be present)

- **Goal** - Specific, measurable feature goal with deliverable
- **User Persona** - Target user, use case, user journey, pain points
- **Why** - Business value, integration benefits, problem solving
- **What** - User-visible behavior and technical requirements
- **All Needed Context** - Documentation, references, codebase analysis
- **Implementation Blueprint** - Data models, tasks, patterns, integration
- **Validation Loop** - 4-level validation system
- **Anti-Patterns** - Specific things to avoid

### Context Completeness Validation

**Before proceeding, validate:** "If someone knew nothing about this codebase, would they have everything needed to implement this successfully?"

**Required context elements:**
- Current codebase tree (run `tree` command)
- Desired codebase tree with file responsibilities
- Known gotchas and library quirks
- Documentation references with specific sections
- Pattern files with exact paths and purposes

## Implementation Blueprint Standards

### Task Structure

```yaml
Task N: [ACTION] [file_path]
  - IMPLEMENT: [Specific implementation details]
  - FOLLOW pattern: [exact file path and pattern description]
  - NAMING: [Naming conventions to follow]
  - DEPENDENCIES: [What must be completed first]
  - PLACEMENT: [Where in codebase this goes]
```

### Pattern Documentation

**For each pattern referenced:**
- Exact file path
- Specific method/class to follow
- Key implementation details
- Gotchas and limitations
- Integration requirements

## Validation Loop Requirements

### Level 1: Syntax & Style
- Ruff linting and formatting
- MyPy type checking
- Zero errors before proceeding

### Level 2: Unit Tests
- Test each component as created
- Follow existing test patterns
- Full coverage of public methods

### Level 3: Integration Testing
- Service startup validation
- Endpoint testing
- Database connectivity
- MCP tool validation

### Level 4: Creative Validation
- Domain-specific testing
- Performance validation
- Security scanning
- Load testing if applicable

## Anti-Pattern Prevention

**Never allow these in generated PRPs:**
- Generic implementation tasks
- Missing pattern references
- Incomplete context
- Vague success criteria
- Missing validation steps
- Unclear file responsibilities

## Quality Gates

**PRP must pass these checks:**
- [ ] All required sections present
- [ ] Context completeness validated
- [ ] Implementation tasks are specific and actionable
- [ ] Pattern references include exact file paths
- [ ] Validation loops are comprehensive
- [ ] Anti-patterns are clearly documented
- [ ] Success criteria are measurable

## Integration with Archon Workflow

**When using with Archon CE Template:**
1. **Language detection** from INITIAL.md drives template adaptation
2. **Workflow scripts** ensure proper sequence
3. **Advanced template** provides implementation precision
4. **Cursor rules** enhance IDE integration
5. **Validation loops** ensure quality at each step

## Example PRP Structure

```markdown
## Goal
**Feature Goal**: Implement user authentication service
**Deliverable**: FastAPI authentication endpoints with JWT tokens
**Success Definition**: Users can register, login, and access protected routes

## Implementation Blueprint
### Implementation Tasks
Task 1: CREATE src/models/auth_models.py
  - IMPLEMENT: UserRequest, UserResponse Pydantic models
  - FOLLOW pattern: src/models/existing_model.py
  - NAMING: CamelCase classes, snake_case fields

Task 2: CREATE src/services/auth_service.py
  - IMPLEMENT: AuthService class with async methods
  - FOLLOW pattern: src/services/database_service.py
  - DEPENDENCIES: Import models from Task 1
```

## Error Handling

**If context is incomplete:**
1. **Stop generation** immediately
2. **Request missing information** from user
3. **Suggest specific additions** to INITIAL.md
4. **Resume only when** context is complete

**If patterns are unclear:**
1. **Analyze existing codebase** for patterns
2. **Document discovered patterns** in PRP
3. **Reference specific files** and methods
4. **Include gotchas** and limitations

## Success Metrics

**PRP is ready when:**
- All sections are complete and specific
- Implementation tasks are actionable
- Pattern references are exact
- Validation loops are comprehensive
- Context completeness is verified
- Anti-patterns are documented

**Generated PRP enables:**
- One-pass implementation success
- Clear development roadmap
- Comprehensive testing strategy
- Quality assurance at every step
- Pattern consistency across codebase# PRP Creation Rules - Advanced Implementation Focus

## Core PRP Creation Workflow

**MANDATORY: Always follow this exact sequence:**

1. **Read INITIAL.md first** - Parse project context and requirements
2. **Analyze codebase** - Understand existing patterns and structure
3. **Generate PRP** - Use advanced template v3 with implementation focus
4. **Validate context** - Ensure all necessary information is included
5. **Review and refine** - Iterate until PRP is implementation-ready

## PRP Template v3 Standards

### Required Sections (ALL must be present)

- **Goal** - Specific, measurable feature goal with deliverable
- **User Persona** - Target user, use case, user journey, pain points
- **Why** - Business value, integration benefits, problem solving
- **What** - User-visible behavior and technical requirements
- **All Needed Context** - Documentation, references, codebase analysis
- **Implementation Blueprint** - Data models, tasks, patterns, integration
- **Validation Loop** - 4-level validation system
- **Anti-Patterns** - Specific things to avoid

### Context Completeness Validation

**Before proceeding, validate:** "If someone knew nothing about this codebase, would they have everything needed to implement this successfully?"

**Required context elements:**
- Current codebase tree (run `tree` command)
- Desired codebase tree with file responsibilities
- Known gotchas and library quirks
- Documentation references with specific sections
- Pattern files with exact paths and purposes

## Implementation Blueprint Standards

### Task Structure

```yaml
Task N: [ACTION] [file_path]
  - IMPLEMENT: [Specific implementation details]
  - FOLLOW pattern: [exact file path and pattern description]
  - NAMING: [Naming conventions to follow]
  - DEPENDENCIES: [What must be completed first]
  - PLACEMENT: [Where in codebase this goes]
```

### Pattern Documentation

**For each pattern referenced:**
- Exact file path
- Specific method/class to follow
- Key implementation details
- Gotchas and limitations
- Integration requirements

## Validation Loop Requirements

### Level 1: Syntax & Style
- Ruff linting and formatting
- MyPy type checking
- Zero errors before proceeding

### Level 2: Unit Tests
- Test each component as created
- Follow existing test patterns
- Full coverage of public methods

### Level 3: Integration Testing
- Service startup validation
- Endpoint testing
- Database connectivity
- MCP tool validation

### Level 4: Creative Validation
- Domain-specific testing
- Performance validation
- Security scanning
- Load testing if applicable

## Anti-Pattern Prevention

**Never allow these in generated PRPs:**
- Generic implementation tasks
- Missing pattern references
- Incomplete context
- Vague success criteria
- Missing validation steps
- Unclear file responsibilities

## Quality Gates

**PRP must pass these checks:**
- [ ] All required sections present
- [ ] Context completeness validated
- [ ] Implementation tasks are specific and actionable
- [ ] Pattern references include exact file paths
- [ ] Validation loops are comprehensive
- [ ] Anti-patterns are clearly documented
- [ ] Success criteria are measurable

## Integration with Archon Workflow

**When using with Archon CE Template:**
1. **Language detection** from INITIAL.md drives template adaptation
2. **Workflow scripts** ensure proper sequence
3. **Advanced template** provides implementation precision
4. **Cursor rules** enhance IDE integration
5. **Validation loops** ensure quality at each step

## Example PRP Structure

```markdown
## Goal
**Feature Goal**: Implement user authentication service
**Deliverable**: FastAPI authentication endpoints with JWT tokens
**Success Definition**: Users can register, login, and access protected routes

## Implementation Blueprint
### Implementation Tasks
Task 1: CREATE src/models/auth_models.py
  - IMPLEMENT: UserRequest, UserResponse Pydantic models
  - FOLLOW pattern: src/models/existing_model.py
  - NAMING: CamelCase classes, snake_case fields

Task 2: CREATE src/services/auth_service.py
  - IMPLEMENT: AuthService class with async methods
  - FOLLOW pattern: src/services/database_service.py
  - DEPENDENCIES: Import models from Task 1
```

## Error Handling

**If context is incomplete:**
1. **Stop generation** immediately
2. **Request missing information** from user
3. **Suggest specific additions** to INITIAL.md
4. **Resume only when** context is complete

**If patterns are unclear:**
1. **Analyze existing codebase** for patterns
2. **Document discovered patterns** in PRP
3. **Reference specific files** and methods
4. **Include gotchas** and limitations

## Success Metrics

**PRP is ready when:**
- All sections are complete and specific
- Implementation tasks are actionable
- Pattern references are exact
- Validation loops are comprehensive
- Context completeness is verified
- Anti-patterns are documented

**Generated PRP enables:**
- One-pass implementation success
- Clear development roadmap
- Comprehensive testing strategy
- Quality assurance at every step
- Pattern consistency across codebase