---ndescription: PRP Creation Rules - Advanced implementation-focused PRP generationnglobs: ["**/*.md", "**/*.mdx", "**/*.txt"]nalwaysApply: falsen---nn# PRP Creation Rules - Advanced Implementation Focusnn## Core PRP Creation Workflownn**MANDATORY: Always follow this exact sequence:**nn1. **Read INITIAL.md first** - Parse project context and requirementsn2. **Analyze codebase** - Understand existing patterns and structuren3. **Generate PRP** - Use advanced template v3 with implementation focusn4. **Validate context** - Ensure all necessary information is includedn5. **Review and refine** - Iterate until PRP is implementation-readynn## PRP Template v3 Standardsnn### Required Sections (ALL must be present)nn- **Goal** - Specific, measurable feature goal with deliverablen- **User Persona** - Target user, use case, user journey, pain pointsn- **Why** - Business value, integration benefits, problem solvingn- **What** - User-visible behavior and technical requirementsn- **All Needed Context** - Documentation, references, codebase analysisn- **Implementation Blueprint** - Data models, tasks, patterns, integrationn- **Validation Loop** - 4-level validation systemn- **Anti-Patterns** - Specific things to avoidnn### Context Completeness Validationnn**Before proceeding, validate:** "If someone knew nothing about this codebase, would they have everything needed to implement this successfully?"nn**Required context elements:**n- Current codebase tree (run `tree` command)n- Desired codebase tree with file responsibilitiesn- Known gotchas and library quirksn- Documentation references with specific sectionsn- Pattern files with exact paths and purposesnn## Implementation Blueprint Standardsnn### Task Structurenn```yamlnTask N: [ACTION] [file_path]n  - IMPLEMENT: [Specific implementation details]n  - FOLLOW pattern: [exact file path and pattern description]n  - NAMING: [Naming conventions to follow]n  - DEPENDENCIES: [What must be completed first]n  - PLACEMENT: [Where in codebase this goes]n```nn### Pattern Documentationnn**For each pattern referenced:**n- Exact file pathn- Specific method/class to follown- Key implementation detailsn- Gotchas and limitationsn- Integration requirementsnn## Validation Loop Requirementsnn### Level 1: Syntax & Stylen- Ruff linting and formattingn- MyPy type checkingn- Zero errors before proceedingnn### Level 2: Unit Testsn- Test each component as createdn- Follow existing test patternsn- Full coverage of public methodsnn### Level 3: Integration Testingn- Service startup validationn- Endpoint testingn- Database connectivityn- MCP tool validationnn### Level 4: Creative Validationn- Domain-specific testingn- Performance validationn- Security scanningn- Load testing if applicablenn## Anti-Pattern Preventionnn**Never allow these in generated PRPs:**n- Generic implementation tasksn- Missing pattern referencesn- Incomplete contextn- Vague success criterian- Missing validation stepsn- Unclear file responsibilitiesnn## Quality Gatesnn**PRP must pass these checks:**n- [ ] All required sections presentn- [ ] Context completeness validatedn- [ ] Implementation tasks are specific and actionablen- [ ] Pattern references include exact file pathsn- [ ] Validation loops are comprehensiven- [ ] Anti-patterns are clearly documentedn- [ ] Success criteria are measurablenn## Integration with Archon Workflownn**When using with Archon CE Template:**n1. **Language detection** from INITIAL.md drives template adaptationn2. **Workflow scripts** ensure proper sequencen3. **Advanced template** provides implementation precisionn4. **Cursor rules** enhance IDE integrationn5. **Validation loops** ensure quality at each stepnn## Example PRP Structurenn```markdownn## Goaln**Feature Goal**: Implement user authentication servicen**Deliverable**: FastAPI authentication endpoints with JWT tokensn**Success Definition**: Users can register, login, and access protected routesnn## Implementation Blueprintn### Implementation TasksnTask 1: CREATE src/models/auth_models.pyn  - IMPLEMENT: UserRequest, UserResponse Pydantic modelsn  - FOLLOW pattern: src/models/existing_model.pyn  - NAMING: CamelCase classes, snake_case fieldsnnTask 2: CREATE src/services/auth_service.pyn  - IMPLEMENT: AuthService class with async methodsn  - FOLLOW pattern: src/services/database_service.pyn  - DEPENDENCIES: Import models from Task 1n```nn## Error Handlingnn**If context is incomplete:**n1. **Stop generation** immediatelyn2. **Request missing information** from usern3. **Suggest specific additions** to INITIAL.mdn4. **Resume only when** context is completenn**If patterns are unclear:**n1. **Analyze existing codebase** for patternsn2. **Document discovered patterns** in PRPn3. **Reference specific files** and methodsn4. **Include gotchas** and limitationsnn## Success Metricsnn**PRP is ready when:**n- All sections are complete and specificn- Implementation tasks are actionablen- Pattern references are exactn- Validation loops are comprehensiven- Context completeness is verifiedn- Anti-patterns are documentednn**Generated PRP enables:**n- One-pass implementation successn- Clear development roadmapn- Comprehensive testing strategyn- Quality assurance at every stepn- Pattern consistency across codebase